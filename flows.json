[
  {
    "id": "5a5415137b2e0cf0",
    "type": "http in",
    "z": "e0c05e5373ea668c",
    "name": "Weather Request",
    "url": "/weatherapi",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 280,
    "y": 100,
    "wires": [["3930ee995f0d31f8"]]
  },
  {
    "id": "3930ee995f0d31f8",
    "type": "function",
    "z": "e0c05e5373ea668c",
    "name": "Extract City",
    "func": "msg.city = msg.req.query.city || \"Tumkur\";\nmsg.payload = { city: msg.city };  \nreturn msg;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 290,
    "y": 140,
    "wires": [["acf240c1fbe583fd"]]
  },
  {
    "id": "76d98d5ed27daac3",
    "type": "function",
    "z": "e0c05e5373ea668c",
    "name": "Build API URL",
    "func": "const apiKey = env.get(\"WEATHER_API_KEY\");\nmsg.url = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(msg.city)}&appid=${apiKey}&units=metric`;\nreturn msg;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 600,
    "y": 320,
    "wires": [["fea1c69c067cf7e2"]]
  },
  {
    "id": "fea1c69c067cf7e2",
    "type": "http request",
    "z": "e0c05e5373ea668c",
    "name": "Fetch Weather",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 600,
    "y": 360,
    "wires": [["5e29b3709d41c050"]]
  },
  {
    "id": "5e29b3709d41c050",
    "type": "function",
    "z": "e0c05e5373ea668c",
    "name": "Process Weather Data",
    "func": "try {\n    const data = msg.payload;\n\n    if (data.cod && data.cod !== 200) {\n        throw new Error(data.message || 'Weather API error');\n    }\n\n    const weather = {\n        city: data.name,\n        weather: data.weather[0].main, \n        temperature: data.main.temp,\n        humidity: data.main.humidity,\n        windspeed: data.wind.speed,\n        timestamp: new Date(data.dt * 1000).toISOString()\n    };\n\n    msg.payload = weather;\n    msg.headers = {\n        'Content-Type': 'application/json'\n    };\n    return [ { payload: weather }, msg ]; \n\n} catch (err) {\n    msg.payload = { error: err.message };\n    msg.statusCode = 400;\n    msg.headers = {\n        'Content-Type': 'application/json'\n    };\n    return [ null, msg ]; \n}",
    "outputs": 2,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 600,
    "y": 400,
    "wires": [["82cc733e4c75e3f5"], ["73e5913a7952613c"]]
  },
  {
    "id": "73e5913a7952613c",
    "type": "http response",
    "z": "e0c05e5373ea668c",
    "name": "Send Response",
    "statusCode": "",
    "headers": {
      "content-type": "application/json",
      "Access-Control-Allow-Origin": "*"
    },
    "x": 920,
    "y": 340,
    "wires": []
  },
  {
    "id": "acf240c1fbe583fd",
    "type": "function",
    "z": "e0c05e5373ea668c",
    "name": "Build MongoDB Query",
    "func": "const city = msg.city;\nconst now = new Date();\nconst threeHoursAgo = new Date(now.getTime() - 3 * 60 * 60 * 1000);\n\nconst query = {\n    \"city\": city,\n    \"timestamp\": { $gte: threeHoursAgo.toISOString() },\n    // \"sort\": { \"timestamp\": -1 },\n    // \"limit\": 1\n};\n\nconst options = {\n    sort: {\"timestamp\": -1 },\n    limit: 1,\n};\n    \n\nmsg.payload = [query , options];\nreturn msg;\n",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 300,
    "y": 180,
    "wires": [["e2ba3e759e0b6997"]]
  },
  {
    "id": "48b74948e125a1f3",
    "type": "switch",
    "z": "e0c05e5373ea668c",
    "name": "Is Cached Data Available?",
    "property": "payload.length",
    "propertyType": "msg",
    "rules": [
      {
        "t": "gt",
        "v": "0",
        "vt": "num"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 320,
    "y": 260,
    "wires": [["52387146b4e0bc93"], ["fbda4b23fabf06e5"]]
  },
  {
    "id": "52387146b4e0bc93",
    "type": "function",
    "z": "e0c05e5373ea668c",
    "name": "Return Cached Data",
    "func": "msg.payload = msg.payload[0];\ndelete msg.payload._id;\nreturn msg;\n",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 600,
    "y": 240,
    "wires": [["73e5913a7952613c"]]
  },
  {
    "id": "fbda4b23fabf06e5",
    "type": "function",
    "z": "e0c05e5373ea668c",
    "name": "Return Call API Message",
    "func": "msg.city = msg.city;\nreturn msg;\n",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 590,
    "y": 280,
    "wires": [["76d98d5ed27daac3"]]
  },
  {
    "id": "82cc733e4c75e3f5",
    "type": "mongodb4",
    "z": "e0c05e5373ea668c",
    "clientNode": "462be1d7670f303b",
    "mode": "collection",
    "collection": "weatherDATA",
    "operation": "insertOne",
    "output": "toArray",
    "maxTimeMS": "0",
    "handleDocId": false,
    "name": "Store",
    "x": 610,
    "y": 460,
    "wires": [[]]
  },
  {
    "id": "e2ba3e759e0b6997",
    "type": "mongodb4",
    "z": "e0c05e5373ea668c",
    "clientNode": "462be1d7670f303b",
    "mode": "collection",
    "collection": "weatherDATA",
    "operation": "find",
    "output": "toArray",
    "maxTimeMS": "0",
    "handleDocId": false,
    "name": "Find data",
    "x": 300,
    "y": 220,
    "wires": [["48b74948e125a1f3"]]
  },
  {
    "id": "462be1d7670f303b",
    "type": "mongodb4-client",
    "name": "Cluster(WeatherApp)",
    "protocol": "mongodb+srv",
    "hostname": "",
    "port": "",
    "dbName": "WeatherDB",
    "appName": "",
    "authSource": "",
    "authMechanism": "DEFAULT",
    "tls": false,
    "tlsCAFile": "",
    "tlsCertificateKeyFile": "",
    "tlsInsecure": false,
    "connectTimeoutMS": "30000",
    "socketTimeoutMS": "0",
    "minPoolSize": "0",
    "maxPoolSize": "100",
    "maxIdleTimeMS": "0",
    "uri": "${MONGODB_URI}",
    "advanced": "{}",
    "uriTabActive": "tab-uri-advanced"
  }
]
